name: CI/CD

on:
  push:
    branches: [main, master]
    tags:
      - 'v*'
  pull_request:

jobs:
  ci:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        dotnet-version: ['9.x']
    env:
      CI: true
    steps:
      - name: Checkout ${{ github.sha }}
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Test
        run: dotnet test --no-build --configuration Release --verbosity normal

      - name: Pack NuGet package
        if: matrix.os == 'ubuntu-latest'
        run: dotnet pack --no-build --configuration Release --output ./artifacts

      - name: Upload NuGet artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: nuget-package
          path: ./artifacts/*.nupkg

  deploy:
    if: startsWith(github.ref, 'refs/tags/v') && github.event_name == 'push'
    needs: ci
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      id-token: write
      contents: write
    env:
      CI: true
    steps:
      - name: Checkout ${{ github.sha }}
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'

      - name: Extract version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Update project version
        run: |
          sed -i "s/<Version>.*<\/Version>/<Version>${{ steps.version.outputs.VERSION }}<\/Version>/" TimeMcpServer.csproj
          sed -i 's/\(^[[:space:]]*"version":[[:space:]]*"\){{VERSION}}\(".*\)/\1${{ steps.version.outputs.VERSION }}\2/' server.json

      - name: Pack
        run: dotnet pack --configuration Release --output ./artifacts

      - name: Publish to NuGet
        run: dotnet nuget push ./artifacts/*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }} --skip-duplicate

      - name: Wait for NuGet propagation
        run: |
          echo "Waiting for NuGet package to propagate..."
          for i in {1..30}; do
            if curl -s "https://api.nuget.org/v3/registration5-gz-semver2/timemcpserver/${{ steps.version.outputs.VERSION }}.json" | grep -q "${{ steps.version.outputs.VERSION }}"; then
              echo "Package found on NuGet!"
              break
            fi
            echo "Attempt $i/30: Package not yet available, waiting 30 seconds..."
            sleep 30
          done

      - name: Install mcp-publisher
        run: npm install -g @modelcontextprotocol/publisher

      - name: Login to MCP Registry
        run: mcp-publisher login github-oidc

      - name: Publish to MCP Registry
        run: mcp-publisher publish

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./artifacts/*.nupkg
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}